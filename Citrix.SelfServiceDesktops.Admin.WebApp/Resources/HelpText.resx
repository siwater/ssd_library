<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AgentUriHelp" xml:space="preserve">
    <value>Optional Url for Agent (e.g. http://server:8000/)</value>
  </data>
  <data name="BrokerUriHelp" xml:space="preserve">
    <value>The address of the Broker web page (WI for XenDesktop 5.6)</value>
  </data>
  <data name="CloudStackUriHelp" xml:space="preserve">
    <value>The address of the CloudPlatform SDK(usually of the form http://server:8080/client/api)</value>
  </data>
  <data name="DescriptionHelp" xml:space="preserve">
    <value>A user friendly description of the desktop offering</value>
  </data>
  <data name="DeviceCollectionNameHelp" xml:space="preserve">
    <value>Name of the PVS device collection (only required for PVS desktops)</value>
  </data>
  <data name="DeviceCollectionServerHelp" xml:space="preserve">
    <value>Address or FQDN of the PVS server (only required for PVS desktops)</value>
  </data>
  <data name="DeviceCollectionSiteHelp" xml:space="preserve">
    <value>Name of the PVS Site (only required for PVS desktops)</value>
  </data>
  <data name="DiskOfferingIdHelp" xml:space="preserve">
    <value>The GUID of the CloudPlatform dsik offering to be used (only required forPVS desktop booting from ISO)</value>
  </data>
  <data name="DomainHelp" xml:space="preserve">
    <value>Optional CloudPlatform domain for user login</value>
  </data>
  <data name="HashCloudStackPasswordHelp" xml:space="preserve">
    <value>Uncheck this box if you have LDAP integration in your CloudPlatform.</value>
  </data>
  <data name="HostnamePrefixHelp" xml:space="preserve">
    <value>Prefix for generating hostnames for this desktop group (max 11 characters)</value>
  </data>
  <data name="HypervisorHelp" xml:space="preserve">
    <value>The hypervisor to use. Only required if booting PVS desktop from ISO</value>
  </data>
  <data name="IsoIdHelp" xml:space="preserve">
    <value>The GUID of the CloudPatform ISO to use (only required for PVS desktop offerings)</value>
  </data>
  <data name="ListenPortHelp" xml:space="preserve">
    <value>The port on which  that the Self Service Desktop agent listens for connections from the web app.</value>
  </data>
  <data name="NameHelp" xml:space="preserve">
    <value>A name for the desktop offering</value>
  </data>
  <data name="NetworkIdHelp" xml:space="preserve">
    <value>The CloudPlatform network id (GUID)</value>
  </data>
  <data name="PowerShellScriptDebugHelp" xml:space="preserve">
    <value>Whether the PowerShell script should write debug log entries</value>
  </data>
  <data name="PowerShellScriptFrequencyHelp" xml:space="preserve">
    <value>Freqency at which the PowerShell script will execute.</value>
  </data>
  <data name="PowerShellScriptPathHelp" xml:space="preserve">
    <value>Name of the powershell script executed by the Self Service Desktops Agent</value>
  </data>
  <data name="ServiceOfferingIdHelp" xml:space="preserve">
    <value>The GUID of the CloudPlatform service offering to be used for desktops </value>
  </data>
  <data name="SyncHelp" xml:space="preserve">
    <value>Check this box if this Self Service Dektop Agent is responsible for managing/synchonizing this device collection (allows you to manually load balance multiple Self Service Desktop Agents)</value>
  </data>
  <data name="TemplateIdHelp" xml:space="preserve">
    <value>The GUID of the CloudPlatform template to boot from (not required for PVS desktop offerings that boot from ISO)</value>
  </data>
  <data name="XenDesktopCatalogHelp" xml:space="preserve">
    <value>Name of the XenDesktop catalog used to contain the desktops from this offering. If the catalog does not exist it will be created. If you leave this blank the default "Self Service Desktops" catalog will be used.</value>
  </data>
  <data name="ZoneIdHelp" xml:space="preserve">
    <value>The CloudPlatform zone id (GUID)</value>
  </data>
</root>